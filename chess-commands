chess extension notes:

from smallchesslib.h
Simply include smallchesslib.h, all code is in this one file, no need for linking. All functions and other resources are also documented in this file, so take a look at it to see the library's API. For a typical use you want to focus on the SCL_Game struct and its associated functions starting with SCL_game*.

where is postgresql folder?
/etc/postgresql/16/main/

where is pg_config file?
/usr/lib/postgresql/16/bin/

make:
PATH=/usr/lib/postgresql/16/bin:$PATH
cd /home/ranaislek/Documents/417-project/chess/chess-template/
ls
make (make clean)
sudo make install

// Structure to represent chess game
typedef struct
{
    SCL_Record *game; 
} ChessGame;

// Structure to represent chess board
typedef struct
{
    SCL_Board *board;
} ChessBoard;

commands:
sudo -i -u postgres
psql chess
chess=# CREATE EXTENSION chess;

helper functions from smallchesslib.h:
SCL_BOARD_STATE_SIZE 69 **
void SCL_boardInit(SCL_Board board);

void SCL_boardCopy(const SCL_Board boardFrom, SCL_Board boardTo);
uint8_t SCL_boardToFEN(SCL_Board board, char *string); **
SCL_boardFromFEN(SCL_Board board, const char *string); **
SCL_boardDead(SCL_Board board);
SCL_boardMate(SCL_Board board);
SCL_boardUndoMove(SCL_Board board, SCL_MoveUndo moveUndo);
SCL_boardGameOver(SCL_Board board);
SCL_boardGetPosition(SCL_Board board);
SCL_RECORD_MAX_SIZE (SCL_RECORD_MAX_LENGTH * 2)

void SCL_recordInit(SCL_Record r);
void SCL_recordCopy(SCL_Record recordFrom, SCL_Record recordTo);
void SCL_recordFromPGN(SCL_Record r, const char *pgn); **
uint16_t SCL_recordLength(const SCL_Record r);
void SCL_recordApply(const SCL_Record r, SCL_Board b, uint16_t moves);
uint8_t SCL_recordRemoveLast(SCL_Record r);
void SCL_printPGN(SCL_Record r, SCL_PutCharFunction putCharFunc,
  SCL_Board initialState); **
